
Unless otherwise mentioned, output ciphertext is base64 encoded, input is either binary or UTF-8 string.

* AES-128-CBC (alias PIDCRYPT)
  compatible with ``openssl enc -aes-128-cbc -a``
  A random 8 byte salt is is prepended to the cipher text as "Salted__" + salt (adding 16 bytes).
  The key and IV for AES-128-CBC are derived from salt and password:
    (MD5 producing binary output)
    material[1] = MD5(password + salt)
    material[2] = MD5(material[1] + password + salt)
    material[3] = MD5(material[2] + password + salt)
  The input is padded with PKCS#5 to blocksize (padding of length n bytes uses "n" as value for all bytes. 01 or 02 02 or 03 03 03 ...).

  The pidCrypt developer didn't understand the padding and appended "\n" (0x0a) to the input before padding.

* AES-256-OFB (alias CRYPTO_JS)
  uses PBKDF2 with the IV (random generated on encryption) as salt, 1 iteration and HMAC-SHA1 as PRF
  to generate the 256 bit AES key (and the password ofc).
  The IV is prepended to the ciphertext, which is generated by encrypting the plaintext with AES-256-OFB.
